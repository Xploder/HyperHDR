name: HyperHDR CI Build

on:
  push:

env:
    USE_CACHE: "1"
    RESET_CACHE: "0"
    USE_CODEQL: "1"
    BUILD_ARCHIVES: ${{ startsWith(github.event.ref, 'refs/tags') && 1 || 0 }}

jobs:

######################
###### Linux #########
######################

  Linux:
    name: ${{ matrix.dockerName }}
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        linuxVersion: [ bullseye ]
        dockerImage: [ x86_64 ]
        include:        
          - dockerImage: x86_64
            linuxVersion: mantic
            dockerName: Ubuntu 23.10 (x86_64)
            platform: linux
    steps:
      # checkout
      - uses: actions/checkout@v3
        with:
          submodules: true

      # generate cache id
      - name: Prepare ccache timestamp
        if: env.USE_CACHE == '1'
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H-%M-%S" UTC)
          file(APPEND "$ENV{GITHUB_OUTPUT}" "timestamp=${current_date}")

       # download cache
      - name: ccache cache files
        if: ( env.USE_CACHE == '1' )
        uses: actions/cache@v3
        with:
           path: .ccache
           key: ${{ matrix.linuxVersion }}-${{ matrix.dockerImage }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
           restore-keys: ${{ matrix.linuxVersion }}-${{ matrix.dockerImage }}-ccache-

      - name: Check testing version
        if: matrix.linuxVersion == 'bookworm'
        run: |
          echo "USE_STANDARD_INSTALLER_NAME=ON" >> $GITHUB_ENV

      - name: Build packages
        env:
          DOCKER_IMAGE: ${{ matrix.dockerImage }}
          DOCKER_TAG: ${{ matrix.linuxVersion }}
          DOCKER_NAME: ${{ matrix.dockerName }}
          PLATFORM: ${{ matrix.platform }}
          USE_CCACHE: ${{ env.USE_CACHE }}
          RESET_CACHE: ${{ env.RESET_CACHE }}
        shell: bash
        run: |
          ./.ci/ci_build.sh

      # Upload artifacts (only on tagged commit)
      - name: Upload artifacts
        if: startsWith(github.event.ref, 'refs/tags') && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          path: deploy/Hyper*

      # Upload artifacts from commit
      - name: Upload artifacts from commit
        if: (startsWith(github.event.ref, 'refs/tags') != true) && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: Linux-${{ matrix.linuxVersion }}-${{ matrix.dockerImage }}-installer
          path: |
            deploy/Hyper*.deb
            deploy/Hyper*.zst
            deploy/Hyper*.rpm


################################
####### CodeQL support #########
################################

  analyze:
    name: Analyze (CodeQL)
    runs-on: ubuntu-latest
    if: ( true )
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp', 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Run composite CodeQL job for '${{matrix.language}}' language
        uses: ./.github/actions/codeql
        with:
          language: ${{matrix.language}}

################################
###### Publish Releases ########
################################

  publish:
    name: Publish Releases
    if: startsWith(github.event.ref, 'refs/tags') && github.event_name != 'pull_request'
    needs: [Linux, windows, macOS]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # generate environment variables
      - name: Generate environment variables from version and tag
        run: |
          echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          echo "VERSION=$(tr -d '\n' < version)" >> $GITHUB_ENV
          echo "preRelease=false" >> $GITHUB_ENV

      # If version contains alpha or beta, mark draft release as pre-release
      - name: Mark release as pre-release
        if: contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta')
        run: echo "preRelease=true" >> $GITHUB_ENV

      # Download artifacts from previous build process
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      # create draft release and upload artifacts
      - name: Create draft release
        uses: softprops/action-gh-release@v1
        with:
          name: HyperHDR ${{ env.VERSION }}
          tag_name: ${{ env.TAG }}
          files: "artifacts/**"
          draft: true
          prerelease: ${{ env.preRelease }}
